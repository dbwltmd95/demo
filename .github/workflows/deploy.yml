name: CI/CD Pipeline via Bastion to Private EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Upload
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant Gradle execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Prepare deploy package (JAR + Dockerfile)
        run: |
          mkdir deploy
          cp Dockerfile deploy/
          cp build/libs/*.jar deploy/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-files
          path: deploy/

  deploy:
    name: Deploy from Bastion to Private EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-files

      - name: Upload files to Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.BASTION_SSH_KEY }}
          source: "*"
          target: "~/demo-app"

      - name: SSH to Bastion and deploy to Private EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            echo "[INFO] Upload to Private EC2 from Bastion"
            scp -i ~/yjs-demo.pem -o StrictHostKeyChecking=no ~/demo-app/* ec2-user@${{ secrets.PRIVATE_EC2_IP }}:~/demo-app/
            ssh -i ~/yjs-demo.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.PRIVATE_EC2_IP }} << "EOF"
              echo "[INFO] Deploying on Private EC2..."
              cd ~/demo-app
              docker stop demo-app || true
              docker rm demo-app || true
              docker build -t demo-app .
              docker run -d -p 8080:8080 --name demo-app demo-app
            EOF